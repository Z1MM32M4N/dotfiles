# We don't have entries in /etc/passwd (because users are managed somehow else)
# The login shell is instead chosen by `pay ssh` and `pay remote ssh` to set
# `'$SHELL --login'` as the argument to the `ssh` command that eventually gets
# run. That runs _after_ whatever the user's configured shell is, so if in the
# ~/.bashrc (here) the user sets the `SHELL` variable to something else, that
# will get run by ssh.
#
# There is documentation here:
# https://trailhead.corp.stripe.com/docs/devbox/remote-dev/dotfiles#changing-the-shell
#
# That means that
# - $SHELL is not a "special" or "magic" variable. Though it _is_ set by `bash`
#   on startup, it's not the sort of thing that if you change it in your bashrc,
#   it automatically causes the shell to change that instant. Rather, it's just
#   something that our ssh wrapper scripts allow as a configuration point.
# - It only affects `pay ssh` and `pay remote ssh`. Directly running `ssh` to a
#   mydev won't automatically use a different shell.

export ORIGINAL_SHELL=$SHELL
if [ -f /home/linuxbrew/.linuxbrew/bin/zsh ]; then
  export SHELL=/home/linuxbrew/.linuxbrew/bin/zsh
else
  export SHELL=/bin/zsh
fi

# --- Stolen from remote_default_bashrc_appendix ------------------------------
# NOTE: we want the shell to only be used in terminals started through:
# 1. `pay remote ssh`
# 2. VSCode's "New Terminal"
#
# In other cases, we want to avoid overriding $SHELL, and that's why we set it back to $ORIGINAL_SHELL `remote_default_bashrc_preamble.sh`)
# This is necessary because some scripts are incompatible with anything but bash.
if [ "$SHELL" != "$ORIGINAL_SHELL" ]; then
  if [[ "$TERM_PROGRAM" == "vscode" ]]; then
    is_vscode=true
  fi

  if [[ "$BASH_EXECUTION_STRING" =~ "pay --prefer-vscode-2fa test" ]]; then
    is_running_test=true
  fi

  if [[ "$BASH_EXECUTION_STRING" =~ "pay --prefer-vscode-2fa debug" ]]; then
    is_running_debug=true
  fi

  if [[ "$BASH_EXECUTION_STRING" =~ "pay --prefer-vscode-2fa tail" ]]; then
    is_running_tail=true
  fi

  if [[ $is_vscode && ! $is_running_test && ! $is_running_debug && ! $is_running_tail ]]; then
    # Launch the preferred shell, so the terminal has it.
    # Note that we don't do this for test runs or debug sessions, as starting the shell there breaks their
    # behaviour from within VS Code
    exec $SHELL
  elif [[ $- == *i* ]]; then
    if shopt -q login_shell; then
      exec $SHELL --login
    else
      exec $SHELL
    fi
  elif [ -z "$SSH_TTY" ]; then
    export SHELL=$ORIGINAL_SHELL
  fi
fi
# -----------------------------------------------------------------------------
